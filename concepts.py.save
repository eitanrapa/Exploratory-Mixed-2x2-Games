import numpy as np
from scipy.optimize import fsolve, least_squares

#U is up, D is down, L is left, R is right
#Player 1 is the row player, having up and down choices
#Player 2 is the col player, having left and right choices
#c_l and c_r are Player 1's payoff differences
#d_u and d_d are Player 2's payoff differences
#p_u and p_d are Player 1's choice probability for Up and Down
#q_l and q_r are Player 2's choice probability for Left and Right

def display_matrix(game):
    a_l, a_r, b_u, b_d, c_l, c_r, d_u, d_d = game
    top_left = a_l + c_l
    top_right = b_u + d_u
    bottom_left = b_d + d_d
    bottom_right = a_r + c_r
    print("(" + str(top_left) + "," + str(b_u) + ")     (" + str(a_r) + "," + str(top_right) + ")\n")
    print("(" + str(a_l) + "," + str(bottom_left) + ")     (" + str(bottom_right) + "," + str(b_d) + ")")

def nash_equilibrium(game):
    a_l, a_r, b_u, b_d, c_l, c_r, d_u, d_d = game
    check_conditions(game)
    p_u = d_d / (d_u + d_d)
    p_d = d_u / (d_u + d_d)
    q_l = c_r / (c_l + c_r)
    q_r = c_l / (c_l + c_r)
    return p_u, p_d, q_l, q_r

# We want this function to output a set of probabilities, just like the Nash
# Equilibrium, based on the 

def transform(s_i, payoff):
    '''
    Transforms a payoff based on the security level. 
    '''
    return min(0, payoff - (payoff - s_i)/2)

def impulse_balance_equilibrium(game):
    '''
    Returns the predicted probability of each strategy choice according to the
    Impulse Balance Equilibrium model. 
    '''
    a_l, a_r, b_u, b_d, c_l, c_r, d_u, d_d = game
   
    # Security levels for players 1 and 2.
    s_1 = max(min(a_l + c_l, a_r), min(a_l, a_r + c_r))
    s_2 = max(min(b_u, b_d + d_d), min(b_u + d_u, b_d))

    # Now need to transform the game.
    LU_1 = transform(s_1, a_l + c_l)
    LU_2 = transform(s_2, b_u)
    RU_1 = transform(s_1, a_r)
    RU_2 = transform(s_2, b_u + d_u)
    LD_1 = transform(s_1, a_l)
    LD_2 = transform(s_2, b_d + d_d)
    RD_1 = transform(s_1, a_r + c_r)
    RD_2 = transform(s_2, b_d)
    
    # Now calculate the magnitude of the impulses, which is the magnitude of the
    # forgone payoff in the transformed game. 
    c_l_star = max(LU_1 - s_1, LD_1 - s_1) # One of these two values should be 0
    c_r_star = max(RU_1 - s_1, RD_1 - s_1)
    d_u_star = max(LU_2 - s_2, RU_2 - s_2)
    d_d_star = max(LD_2 - s_2, RD_2 - s_2)

    c = c_l_star / c_r_star
    d = d_u_star / d_d_star
    
    p_u = np.sqrt(c) / (np.sqrt(c) + np.sqrt(d))
    q_l = 1 / (1 + np.sqrt(c * d))

    return p_u, 1 - p_u, q_l, 1 - q_l

# FIXME: adjust equations to include payoffs
def qre_eqs(x, l = 0, payoffs = []):
    # A = 3
    eq1 = x[0] - 1/(1 + np.exp(l * (1 - (1 + 3) * x[1])))
    eq2 = x[1] - 1/(1 + np.exp(l * (2 * x[0] - 1)))
    return [eq1, eq2]

def quantal_response_equilibrium(game, param):
    '''
    Quantal response equilibrium as function of chosen free parameter
    '''
    a_l, a_r, b_u, b_d, c_l, c_r, d_u, d_d = game
    # use Nash eq as initial guess
    p_u, p_d, q_l, q_r = nash_equilibrium(game)
    soln = fsolve(qre_eqs, [p_u, q_l], (param))
    qre_p_u = soln[0]
    qre_q_l = soln[1]
    return qre_p_u, 1 - qre_p_u, qre_q_l, 1 - qre_q_l

def sample_n_equilibrium(game):
    return

def poisson_ch_equilibrium(game):
    return

#Check for negatives and fractions
def check_conditions(game):
    a_l, a_r, b_u, b_d, c_l, c_r, d_u, d_d = game
    if any(n < 0 for n in (a_l, a_r, b_u, b_d)):
        raise Exception("Base payoffs must be non-negative")
    if any(n <= 0 for n in (a_l, a_r, b_u, b_d)):
        raise Exception("Payoff differences must be positive")
    return None
